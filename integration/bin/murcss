#!/usr/bin/env python
# encoding: utf-8
'''
Copyright (C) 2014  Sebastian Illing
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
'''


import sys
import getopt
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+'/../metrics/')
from msss import Msss
from crpss import Crpss

_short_args = "hnd"
_args = ['help', 'config_file=']

def getMurcssDict():
    '''Standard input of Murcss'''
    return dict(output='/tmp/murcss/output', output_plots='/tmp/murcss/plots', decadals='1960,1965,1970,1975,1980,1985', 
            variable='tas', cache='/tmp/murcss/cache', baseDir='..', maskMissingValues=True, model1='mpi-esm-lr', 
            model2='mpi-esm-lr', project1='baseline1', project2='baseline0', observation='HadCrut', product1='output', product2='output1', 
            ensemblemembers1='*', ensemblemembers2='*', institute1='mpi-m', institute2='mpi-m', leadtimes='1,2-9', experiment1='decs4e', experiment2='decadal',
            result_grid=None, level=None, lonlatbox=None, fieldmean=None, significance=False, bootstrap_number=100)

def printHelp():
    print """MurCSS (v1.0.0): The tool calculates the Mean Squared Error Skill Score (MSESS) its decomposition (Correlation + Conditional Bi
as) and the Continuous Ranked Probability Skill Score (CRPSS)
as proposed by Goddard et al. [2013]. 
The MSSS of both models and the MSSS "between" the two models (model versions) are calculated for different leadtimes.
The CRPSS is calculated for both models defined by the input parameters. 

Plots are stored in "output_plots" and reusable NetCDF files are saved in "output" 
    
Options:
output            (default: "/tmp/murcss/output/"
                  The Output directory
output_plots      (default: "/tmp/murcss/plots/)
                  Output directory of produced plots
decadals          (default: "1960:5:2000") 
                  Specify the experiments you want to use. I.e.
                  1960,1965,1970,..,1995. Or you can write 1960:5:1995
variable          (default: "tas") [mandatory]
                  The name of the variable you want to analyze (CMOR)
project1          (default: "baseline1") [mandatory]
                  BASELINE0, BASELINE1, CMIP5 or PROJECTDATA
product1          (default: "output") [mandatory]
                  Product 1 to analyze
institute1        (default: "mpi-m") [mandatory]
                  I.e. mpi-m
model1            (default: "mpi-esm-lr") [mandatory]
                  Model 1 to analyze
experiment1       (default: "decs4e") [mandatory]
                  Prefix for experiments. I.e. "decs4e" or "decadal"
ensemblemembers1  (default: "*")
                  Here you can specify which ensemble members you want to use.
                  Please insert a comma separated list. I.e. "r1i1p1,r2i1p1,..".
                  If you leave this blank all members are used!
project2          (default: "baseline0") [mandatory]
                  BASELINE0, BASELINE1, CMIP5 or PROJECTDATA
product2          (default: "output1") [mandatory]
                  Product 1 to analyze
institute2        (default: "mpi-m") [mandatory]
                  I.e. mpi-m
model2            (default: "mpi-esm-lr") [mandatory]
                  Model 2 to analyze
experiment2       (default: "decadal") [mandatory]
                  Prefix for experiments. I.e. "decs4e" or "decadal"
ensemblemembers2  (default: "*")
                  Here you can specify which ensemble members you want to use.
                  Please insert a comma separated list. I.e. "r1i1p1,r2i1p1,..".
                  If you leave this blank all members are used!
leadtimes         (default: 1,2-9) [mandatory]
                  Leadtimes to analyze
observation       (default: HadCrut) [mandatory]
                  Observation to compare. I.e. merra or hadcrut3v. You can also
                  specify an observation file.
significance      (default: False)
                  Whether you want to calculate significance levels.
                  WARNING: This could take up to 1 day!
bootstrap_number  (default: 500)
                  Number of bootstrap runs.
level             (default: None)
                  Level to select. If you are using 3D-Files
lonlatbox         (default: <undefined>)
                  Here you can specify a region. I.e. -100,40,20,80
maskMissingValues (default: True)
                  Whether you want to mask missing values in observation file or
                  not
cache             (default: "/tmp/murcss/cache/")
                  Workdir
result_grid       (default: <undefined>)
                  You can specify a gridfile or a grid description like r20x25"""

def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    if argv is None:
       argv = sys.argv[1:]
    
    args, lastargs = getopt.getopt(argv, _short_args, _args)
    
    for flag,arg in args:
        if flag=='-h' or flag=='--help':
            return printHelp()
    
    murcss_dict = getMurcssDict()
    for arg in lastargs:
        if '=' not in arg:
            raise CommandError("Invalid format for query: %s" % arg)
            
        items = arg.split('=')
        key, value = items[0], ''.join(items[1:])
        murcss_dict[key] = value
            
    murcss_dict['decadals'] = map(int,murcss_dict['decadals'].split(','))
    murcss_dict['bootstrap_number'] = int(murcss_dict['bootstrap_number'])
    print '#######################'
    print 'Calculating the MSSS'
    print '#######################'
    #Calculation of MSESS
    if(not murcss_dict['significance']):
        msss_dict = murcss_dict.copy()
        msss_dict.pop('bootstrap_number')
        msss_dict.pop('significance')
        try:
            msss = Msss(**msss_dict)
            msss.prepareInput()
            msss.analyze()   
        finally:
            msss.deleteCache()
    else:
        from metrics.msssBootstrap import main
        msss = main(murcss_dict.copy(),'..')

    print '#######################'
    print 'Calculating the CRPSS for Model1'
    print '#######################'
    crpss1 = Crpss(output=murcss_dict['output'], 
                       output_plots=murcss_dict['output_plots'], 
                       
                       decadals=murcss_dict['decadals'],
                       variable=murcss_dict['variable'], 
                       
                       project = murcss_dict['project1'],
                       product1=murcss_dict['product1'], 
                       institute1=murcss_dict['institute1'], 
                       model=murcss_dict['model1'], 
                       experiment=murcss_dict['experiment1'],
                       ensemblemembers=murcss_dict['ensemblemembers1'], 
                       
                       observation = murcss_dict['observation'], 
                       leadtimes=murcss_dict['leadtimes'],
                       result_grid=murcss_dict['result_grid'], 
                       
                       maskMissingValues=murcss_dict['maskMissingValues'], 
                       bootstrapSwitch=murcss_dict['significance'], 
                       bootstrap_number=murcss_dict['bootstrap_number'],
                       level=murcss_dict['level'], 
                       lonlatbox=murcss_dict['lonlatbox'], 
                       fieldmean=murcss_dict['fieldmean'],
                       
                       cache=murcss_dict['cache'], 
                       
                       baseDir = murcss_dict['baseDir'])
    crpss1.outputDir = msss.outputDir
    crpss1.outputPlots = msss.outputPlots
    crpss1.prepareInput()
    crpss1.analyze()
    crpss1.deleteCache()
    print '#######################'
    print 'Calculating the CRPSS for Model2'
    print '#######################'    
    crpss2 = Crpss(output=murcss_dict['output'], 
                       output_plots=murcss_dict['output_plots'], 
                       
                       decadals=murcss_dict['decadals'],
                       variable=murcss_dict['variable'], 
                       
                       project = murcss_dict['project2'],
                       product1=murcss_dict['product2'], 
                       institute1=murcss_dict['institute2'], 
                       model=murcss_dict['model2'], 
                       experiment=murcss_dict['experiment2'],
                       ensemblemembers=murcss_dict['ensemblemembers2'], 
                       
                       observation = murcss_dict['observation'], 
                       leadtimes=murcss_dict['leadtimes'],
                       result_grid=murcss_dict['result_grid'], 
                       
                       maskMissingValues=murcss_dict['maskMissingValues'], 
                       bootstrapSwitch=murcss_dict['significance'], 
                       bootstrap_number=murcss_dict['bootstrap_number'],
                       level=murcss_dict['level'], 
                       lonlatbox=murcss_dict['lonlatbox'], 
                       fieldmean=murcss_dict['fieldmean'],
                       
                       cache=murcss_dict['cache'], 
                       
                       baseDir = murcss_dict['baseDir'])
    crpss2.outputDir = msss.outputDir
    crpss2.outputPlots = msss.outputPlots
    crpss2.prepareInput()
    crpss2.analyze()
    crpss2.deleteCache()    

    import metrics.msss, metrics.metricAbstract, metrics.findFiles, metrics.filehandler, metrics.taylorplot, metrics.crpss, metrics.msssBootstrap, metrics.findFilesSeason
    del metrics.msss.cdo, metrics.metricAbstract.cdo, metrics.findFiles.cdo, metrics.filehandler.cdo, metrics.taylorplot.cdo, metrics.crpss.cdo, metrics.msssBootstrap.cdo, metrics.findFilesSeason.cdo
    print 'Calculation finished.'
    print 'Plots produced in %s' %(msss.outputPlots,)

if __name__ == "__main__":
    sys.exit(main())
